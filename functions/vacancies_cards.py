import re

from settings import logging


async def message_creater(vacancy):
    for key, value in vacancy.items():
        if type(value) == list:
            value = ', '.join(value)
            vacancy[key] = value

        if str(value) == '' or str(value) == 'None':
            vacancy[key] = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n'

    if 'None' in vacancy['–û–ø–ª–∞—Ç–∞ –û–¢']:
        vacancy['–û–ø–ª–∞—Ç–∞ –û–¢'] = ''
    if 'None' in vacancy['–û–ø–ª–∞—Ç–∞ –î–û']:
        vacancy['–û–ø–ª–∞—Ç–∞ –î–û'] = ''


    vacancy_name = vacancy['–í–∞–∫–∞–Ω—Å–∏—è']

    # valute = vacancy['–í–∞–ª—é—Ç–∞']
    min_salary = vacancy['–û–ø–ª–∞—Ç–∞ –û–¢']
    max_salary = vacancy['–û–ø–ª–∞—Ç–∞ –î–û']
    min_max_salary_str = f'{min_salary}{max_salary}'
    if min_max_salary_str == '':
        min_max_salary_str = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n'
    
    req_text = vacancy['–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è']
    if req_text != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n':
        logging.info(f'–ü–†–û–í–ï–†–ö–ê:\nreq_text = !!{req_text}!!\ntype ={type(req_text)}\n')
        requirement = vacancy['–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è'].split('. ')
        req_text = '\n'
        for req in requirement:
            
            if len(req) > 3:
                if req[0] == '-':
                    req = req[1::]
                req_text += f'- {req}.\n'
    
    resp_text = vacancy['–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏']
    if resp_text != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n':
        responsibilities = vacancy['–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏'].split('. ')
        resp_text = '\n'
        for resp in responsibilities:
            if resp != '': 
                resp_text += f'- {resp}.\n'

    schedule = vacancy['–†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫']

    experience = vacancy['–ù–∞–ª–∏—á–∏–µ –æ–ø—ã—Ç–∞']
    if '–ù–µ—Ç –æ–ø—ã—Ç–∞' in experience:
        experience = '—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –±–µ–∑ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã'
    
    employment = vacancy['–ó–∞–Ω—è—Ç–æ—Å—Ç—å']

    vacancy_url = vacancy['–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é']
    
    employer_name = vacancy['–ö–æ–º–ø–∞–Ω–∏—è']

    vacancy_text = (
    f'<b>–ö–æ–º–ø–∞–Ω–∏—è: {employer_name}</b>\n\n'

    f'<b>–í–∞–∫–∞–Ω—Å–∏—è: {vacancy_name}</b>\n\n'

    f'üí∞ <u><b>–û–ø–ª–∞—Ç–∞</b></u>:\n'
    f'{min_max_salary_str}\n'

    f'üìã <u><b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</b></u>: {req_text}\n'

    f'‚öôÔ∏è <u><b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</b></u>: {resp_text}\n'

    f'üïí <u><b>–†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫</b></u>: {schedule}.\n\n'

    f'üë• <u><b>–ù–∞–ª–∏—á–∏–µ –æ–ø—ã—Ç–∞</b></u>: {experience}.\n\n'

    f'üìÖ <u><b>–ó–∞–Ω—è—Ç–æ—Å—Ç—å</b></u>: {employment}.\n\n'

    f'üîó <a href="{vacancy_url}">–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é</a>\n\n'

    '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! üí°‚ú®'
    )

    return vacancy_text


async def inf_taker(full_information):
    tight_information = []
    for vac in full_information:
        new_vac = {}
        new_vac['id –í–∞–∫–∞–Ω—Å–∏–∏'] = vac['id']

        new_vac['–ö–æ–º–ø–∞–Ω–∏—è'] = vac['employer']['name']

        new_vac['–†–µ–≥–∏–æ–Ω'] = vac['area']['name']
        
        new_vac['–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–º–ø–∞–Ω–∏–∏'] = vac['employer']['name']
        new_vac['–í–∞–∫–∞–Ω—Å–∏—è'] = vac['name']
        
        # new_vac['–í–∞–ª—é—Ç–∞'] = vac['salary']['currency']
        try:
            valute = vac['salary']['currency']
            if valute.__eq__('RUR'):
                valute = '—Ä—É–±'
            value_m = vac['salary']['from']
            new_vac['–û–ø–ª–∞—Ç–∞ –û–¢'] = f'–û—Ç {value_m} {valute}\n'
            
            value_max = vac['salary']['to'] 
            new_vac['–û–ø–ª–∞—Ç–∞ –î–û'] = f'–î–æ {value_max} {valute}\n'
        except Exception:
            new_vac['–û–ø–ª–∞—Ç–∞ –û–¢'] = f'–û—Ç: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n'
            new_vac['–û–ø–ª–∞—Ç–∞ –î–û'] = f'–î–æ: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n'
        
        # new_vac['–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'] = vac['employer']['logo_urls']['original']
        work_req = vac['snippet']['requirement']
        if work_req:
            new_vac['–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è'] = re.sub(r'<[^>]+>', '', work_req)
        else:
            new_vac['–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è'] = None
        work_resp = vac['snippet']['responsibility']
        if work_resp:
            new_vac['–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏'] = re.sub(r'<[^>]+>', '', work_resp)
        else:
            new_vac['–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏'] = None

        new_vac['–†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫'] = vac['schedule']['name']

        new_vac['–ù–∞–ª–∏—á–∏–µ –æ–ø—ã—Ç–∞'] = vac['experience']['name'] 

        new_vac['–ó–∞–Ω—è—Ç–æ—Å—Ç—å'] = vac['employment']['name']

        
        # new_vac['–≥–æ—Ä–æ–¥'] = vac['address']['city']
        try:
            m_s = vac['address']['metro_stations']
            new_vac['–°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ'] = []
            for metro_stations in m_s:
                # new_vac['—Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ'].append(metro_stations['station_name'], metro_stations['line_name'])
                new_vac['–°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ'].append(metro_stations['station_name'])

        except Exception:
            pass
        
        
        new_vac['–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é'] = vac['alternate_url']
        new_vac['–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è'] = vac['employer']['alternate_url']
        tight_information.append(new_vac)
        
    return tight_information
