import logging

from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import ContextTypes

from constants.keyboards import (admin_main_menu_keyboard,
                                 user_main_menu_keyboard)
from constants.messages_text import welcome_text
from constants.regions_data import region_buttons_list
from constants.some_constants import admins_id, group_id
from db_depart.user_db import update_user_in_db
from functions.inline_buttons import extra_inline_button, set_inline_keyboard
from functions.mail_sender import send_email
from pwd_generator import get_current_directory


async def user_full_information_process(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user_id = update.effective_user.id

    if '–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
        context.user_data.pop('–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
        warning_text = '–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞.\n–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω.'
        await context.bot.send_message(chat_id=user_id, text=warning_text)
    # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –∑–∞–ø–æ–ª–Ω—è–ª –∞–Ω–∫–µ—Ç—É –∏ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª –µ–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å
    # —Ç–æ–≥–¥–∞ –º—ã –ø—Ä–µ—Ä—ã–≤–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞

    if update.message:
        current_text = update.message.text
        current_step = context.user_data['–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö']
    else:
        current_text = None
        current_step = '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    
    step = {
        '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è': ('–°—Ç–∞—Ä—Ç', '–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞,\n–∞ –æ–Ω –±–µ—Ä–µ–∂–Ω–æ —Å–æ–±–µ—Ä–µ—Ç –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∫–µ—Ç—É üì†\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.'),
        # '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞': ('–°—Ç–∞—Ä—Ç', None),
        '–°—Ç–∞—Ä—Ç': ('–§–ò–û','–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à–∏ –§–ò–û:'),
        '–§–ò–û': ('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'),
        '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞': ('email', '–í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:'),
        'email': ('–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞', '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:'),
        '–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞': ('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:'),
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å': ('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–í–∞—à —Å—Ç–∞–∂:'),
        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã': ('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–í–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:'),
        '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', None),
        '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ': (
            'done',
            (
                '–ú—ã –ø—Ä–∏–Ω—è–ª–∏ –í–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ —Ä–∞–±–æ—Ç—É. –°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n'
                '–ú—ã –∏–∑—É—á–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n'
                '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–∏—á–Ω–æ, –ø—Ä–æ—Å–∏–º\n–æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –∞–¥—Ä–µ—Å—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã: career@gehia.ru'
            )
        ),
        'done': (None, None)
    }

    save_steps = [
        '–§–ò–û', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'email', '–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
        ]
    
    
    logging.info(f'current_text = {current_text}')
    if current_text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or current_text == '–ù–∞–∑–∞–¥':
        context.user_data['–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö'] = '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        context.user_data.pop('–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö')
        
        admin_check = user_id in admins_id
        if admin_check:
            context.user_data['admin_status'] = True
            buttons_list = admin_main_menu_keyboard
        else:
            buttons_list = user_main_menu_keyboard

        keyboard = [
            ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text='–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=reply_markup)
        await set_inline_keyboard(update, context, buttons_list = buttons_list, message_text = welcome_text)
        return

    if current_step in save_steps:
        context.user_data['information_form'][current_step] = current_text
        await update_user_in_db(user_id, user_inf={current_step:current_text})
    
    # –ü–û–î–£–ú–ê–¢–¨ –û –¢–û–ú –ß–¢–û–ë–´ –ü–ï–†–ï–ù–ï–°–¢–ò –î–í–ï –°–¢–†–û–ö–ò, –ö–û–¢–û–†–´–ï –ù–ò–ñ–ï –ò –ò–ó–ú–ï–ù–ò–¢–¨ –ü–†–û–í–ï–†–ö–£
    # –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –°–õ–ï–î–£–Æ–©–ï–ì–û —à–∞–≥–∞, –∞ –¢–ï–ö–£–©–ï–ì–û
    next_step, message_text = step[current_step]
    context.user_data['–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö'] = next_step
    
    
    if current_step.__eq__('–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'):
        text = (
            '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞,\n'
            '–æ–Ω —Å–æ–±–µ—Ä—ë—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∫–µ—Ç—É\n'
            '–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç –µ—ë —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ‚úâÔ∏è'
        )
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        keyboard = [
                ['–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚úÖ'],
                ['–ù–∞–∑–∞–¥']
            ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
        project_folder = await get_current_directory()
        pdf_path = project_folder + '/constants/accept.docx' 
        with open(pdf_path, 'rb') as pdf_file:
            await context.bot.send_document(chat_id=user_id, document=pdf_file, filename='–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.docx')  
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

    
    elif next_step.__eq__('–§–ò–û'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à–∏ –§–ò–û:'
        if current_text.__eq__('–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚úÖ'):
            keyboard = [
            ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ]

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

        else:
            context.user_data['–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö'] = '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
            context.user_data.pop('–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö')
            
            admin_check = user_id in admins_id
            if admin_check:
                context.user_data['admin_status'] = True
                buttons_list = admin_main_menu_keyboard
            else:
                buttons_list = user_main_menu_keyboard

            keyboard = [
                ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await context.bot.send_message(chat_id=user_id, text='–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=reply_markup)
            await set_inline_keyboard(update, context, buttons_list = buttons_list, message_text = welcome_text)

    elif next_step.__eq__('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'
        keyboard = [
        ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)
    

    elif next_step.__eq__('email'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:'
        keyboard = [
        ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)
    
    elif next_step.__eq__('–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:'
        keyboard = region_buttons_list

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)


    elif next_step.__eq__('–î–æ–ª–∂–Ω–æ—Å—Ç—å'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:'
        keyboard = [
            ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)
    

    elif next_step.__eq__('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–í–∞—à —Å—Ç–∞–∂:'
        keyboard = [
        ['–º–µ–Ω–µ–µ 1 –≥–æ–¥–∞'],
        ['1-2 –≥–æ–¥–∞'],
        ['2-3 –≥–æ–¥–∞'],
        ['3+ –ª–µ—Ç']
        
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)
    
    elif next_step.__eq__('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–í–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:'
        keyboard = [
        ['–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'],
        ['–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ'],
        ['–®–∫–æ–ª—å–Ω–æ–µ'],

    ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)


    elif next_step.__eq__('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        keyboard = [
        ['–í—Å—ë –≤–µ—Ä–Ω–æ!‚úÖ'],
        ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'],
        ]

        user_inf = context.user_data['information_form']
        full_name = user_inf['–§–ò–û']
        phone = user_inf['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']
        email = user_inf['email']
        place = user_inf['–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞']
        work = user_inf['–î–æ–ª–∂–Ω–æ—Å—Ç—å']
        exp = user_inf['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã']
        educ = user_inf['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']
        
        user_bio = (
            f'<b>–§–ò–û:</b>\n{full_name}\n\n'
            f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n{phone}\n\n'
            f'<b>Email:</b>\n{email}\n\n'
            f'<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b>\n{place}\n\n'
            f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b>\n{work}\n\n'
            f'<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>\n{exp}\n\n'
            f'<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n{educ}\n\n'
            )
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=user_bio, reply_markup=reply_markup, parse_mode='HTML')

    elif current_step.__eq__('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')

        keyboard = [
                ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        if current_text.__eq__('–í—Å—ë –≤–µ—Ä–Ω–æ!‚úÖ'):
            context.user_data.pop('–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö')
            
            user_inf = context.user_data['information_form']
            full_name = user_inf['–§–ò–û']
            phone = user_inf['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']
            email = user_inf['email']
            place = user_inf['–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞']
            work = user_inf['–î–æ–ª–∂–Ω–æ—Å—Ç—å']
            exp = user_inf['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã']
            educ = user_inf['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']
            
            user_bio_notice = (
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}\n'
            '–ó–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n'
            f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n{phone}\n'
            f'<b>Email:</b>\n{email}\n'
            f'<b>–†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:</b>\n{place}\n'
            f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b>\n{work}\n'
            f'<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>\n{exp}\n'
            f'<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n{educ}\n'
            )

            await context.bot.send_message(chat_id=user_id, text='–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ.', reply_markup=reply_markup)
            await extra_inline_button(update, context, message_text,)
            

            await send_email(
                subject = '–ù–æ–≤–∞—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                body = user_bio_notice,
                to_email = 'rabota@ogk2.ru'
            )
            await context.bot.send_message(chat_id=group_id, text=user_bio_notice, parse_mode='HTML')

        else:
            context.user_data['–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö'] = '–§–ò–û'
            
            await context.bot.send_message(chat_id=user_id, text='–¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –§–ò–û:', reply_markup=reply_markup)

    logging.info(f'–ó–ê–í–ï–†–®–ê–ï–ú –†–ê–ë–û–¢–£ –§–£–ù–ö–¶–ò–ò —Å —à–∞–≥–æ–º {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
    

async def list_waiting(update, context):
    logging.info('–í–´–ó–í–ê–õ–ò list_waitnig')
    
    if '–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö' not in context.user_data:
        # await update.message.reply_text(text_wait, reply_markup=reply_markup)
        context.user_data['–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö'] = '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        context.user_data['information_form'] = {}
    await user_full_information_process(update, context)

    logging.info('–ó–ê–í–ï–†–®–ò–õ–ò list_waitnig')
